name: Build and Upload Package Documentation on GitHub Pages

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      package-name:
        required: true
        type: string

jobs:
  deploy_documentation:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: "Set-up: Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Install: Dependencies for headless server"
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb jq

      - name: "Checkout requirements and files for testing"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          ref: master

      - name: Install everything, run the tests, produce the .coverage file
        run: |
          python -m pip install wheel build
          python -m build --wheel
          python -m pip install .[documentation]

      - name: Get current tag
        id: get-tag
        run: |
          # Use git describe to find the latest tag
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0.0")

          # Output the tag to the environment
          echo "tag=$TAG" >> $GITHUB_ENV
          echo "Tag found or default: $TAG"

      - name: "Sphinx build"
        run: |
          sphinx-build -b html docs/source /tmp/documentation_build

      - name: Checkout Pages Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: documentation_page

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Download and process template_index.html
        run: |
          # Download the template_index.html
          curl -o template_index.html https://raw.githubusercontent.com/MartinPdeS/MPSActions/refs/heads/master/asset/template_index.html

          # Replace <package> with the provided package name and save to the docs directory
          sed "s|<package>|${{ inputs.package-name }}|g" template_index.html > ./index.html
          rm -rf template_index.html

      - name: Update new documentation version
        run: |
          rm -rf docs/${{ env.tag }}
          rm -rf docs/latest
          mv /tmp/documentation_build docs/${{ env.tag }}
          cp -r docs/${{ env.tag }} docs/latest

      - name: Scan, sort versions, and update version_switcher.json
        run: |
          # Define the path to version_switcher.json
          json_file="version_switcher.json"
          rm -f $json_file
          docs_path="docs"
          base_url="https://martinpdes.github.io/${{ inputs.package-name }}"

          # Start the JSON array
          echo "[" > $json_file

          # Handle the "latest" version explicitly
          if [ -d "$docs_path/latest" ]; then
            latest_url="${base_url}/${docs_path}/latest"
            jq -n \
              --arg name "latest" \
              --arg version "latest" \
              --arg url "$latest_url" \
              '{name: $name, version: $version, url: $url}' >> $json_file
          fi

          # Get sorted version directories in descending order excluding "latest"
          version_dirs=$(ls -v $docs_path | grep -v "^latest$" | sort -V -r)

          # Loop over sorted versions and add to JSON file
          for version in $version_dirs; do
            version_url="${base_url}/${docs_path}/${version}"

            # Add a comma after "latest" or previous entry
            echo "," >> $json_file

            # Append each version as a JSON entry
            jq -n \
              --arg name "$version" \
              --arg version "$version" \
              --arg url "$version_url" \
              '{name: $name, version: $version, url: $url}' >> $json_file
          done

          # End the JSON array
          echo "]" >> $json_file

          # Add and commit the updated version_switcher.json
          git add $json_file
          echo $json_file
          git add index.html
          git add docs/
          git commit --allow-empty -m "Update version_switcher.json"
          git push origin HEAD

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
