name: Build and Upload Wheel

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
    secrets:
      PYPI_API_TOKEN:
        required: true


jobs:
    ManyLinux_x86_64:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            submodules: 'true'

        - name: "translate python version to cp"
          shell: bash
          run: |
              echo "Python version to be translated: ${{inputs.python-version}} saved in env.dotted_python_version"

              TEMP=${{ inputs.python-version }}
              PYTHON_CP_VERSION="cp${TEMP//./}"

              echo "PYTHON_CP_VERSION=$PYTHON_CP_VERSION" >> $GITHUB_ENV
              echo "dotted_python_version=$TEMP" >> $GITHUB_ENV
              echo "cp_python_version=$PYTHON_CP_VERSION" >> $GITHUB_ENV

              echo "Python version translated to: $PYTHON_CP_VERSION saved in env.cp_python_version"

        - uses: actions/setup-python@v4
          with:
              python-version: ${{ inputs.python-version }}

        - name: "Running unittests and building wheel"
          shell: bash
          run: |
              python -m pip install --upgrade pip
              python -m pip install wheel build
              python -m pip install -e .[testing]
              pytest -s
              python -m build

        - name: "Upload: Wheel Artifact"
          uses: actions/upload-artifact@v3
          with:
              name: wheel-artifact
              path: ./dist/*

    publish_wheel:
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        needs: [ManyLinux_x86_64]
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
            with:
                fetch-depth: 0
                submodules: 'true'

          - name: "Set-up: Python ${{ inputs.python-version }}"
            uses: actions/setup-python@v4
            with:
                python-version: "${{ inputs.python-version }}"

          - name: "Install: Dependencies"
            shell: bash
            run: |
                python -m pip install --upgrade pip
                python -m pip install twine

          - name: "Download: Wheel Artifact"
            uses: actions/download-artifact@v3
            with:
                name: wheel-artifact
                path: ./dist

          - name: "Publish: Wheel"
            uses: pypa/gh-action-pypi-publish@v1.5.1
            env:
                MY_SECRET: ${{ inputs.password }}
            with:
                packages_dir: ./dist
                user: __token__
                password: "${{ secrets.PYPI_API_TOKEN }}"
                verbose: true
